[{"title":"修改 hexo 的 markdown 标题链接形式","date":"2019-04-11T01:47:34.000Z","path":"20190411/modify-title-link-in-hexo.html","text":"修改 hexo 的 markdown 标题链接形式以便和 vscode 更好的配合写作. 1. 配置 hexo 2. 修改依赖包的源码 目前主力编辑器是 vscode，大部分的 markdown 文章都是在 vscode 里面写，然后复制到印象笔记或者hexo里去。 vscode 里使用 Markdown TOC 插件来为 markdown 文档生成 toc。但是生成的链接形式与 hexo 渲染生成的链接形式不一样，导致在 hexo 里文章内容的 toc 不能正常导航。 例子： 1234567对于以下标题# 2.4. HelloWorldMarkdown TOC 生成的链接形式为：#24-hellowold在 hexo 里渲染生成的链接形式为：#2-4-HelloWorld Markdown TOC 会把标题里的英文字母全部小写，并且每级标题用 - 隔开。 更改以下两处地方即可让 hexo 的链接形式与 Markdown TOC 的一致。 1. 配置 hexo123# https://github.com/hexojs/hexo-renderer-marked/blob/master/README.mdmarked: modifyAnchors: 1 # 默认为’‘,默认行为，不改变标题中的字母的大小写；设置为 1，则将内容中的 h1，h2 等标题中的字母转换为小写。设置为 1 是为了兼容 vscode 中的 toc 插件生成的链接（该插件会将字母全部变为小写） 2. 修改依赖包的源码在 node_modules/hexo-util/lib/slugize.js 中增加一个正则替换语句 12345678910111213141516171819202122232425// 原代码var result = escapeDiacritic(str) // Remove control characters .replace(rControl, '') // Replace special characters .replace(rSpecial, separator) // Remove continous separators .replace(new RegExp(escapedSep + '&#123;2,&#125;', 'g'), separator) // Remove prefixing and trailing separtors .replace(new RegExp('^' + escapedSep + '+|' + escapedSep + '+$', 'g'), '');// 修改为var result = escapeDiacritic(str) // Remove control characters .replace(rControl, '') // Adapt to Markdown TOC .replace(/(\\d+)(\\.)(?!\\s)/g, function (fullMatch, group1, group2) &#123; return group1; &#125;) // Replace special characters .replace(rSpecial, separator) // Remove continous separators .replace(new RegExp(escapedSep + '&#123;2,&#125;', 'g'), separator) // Remove prefixing and trailing separtors .replace(new RegExp('^' + escapedSep + '+|' + escapedSep + '+$', 'g'), '');","tags":[{"name":"vscode","slug":"vscode","permalink":"http://ultimatefridge.top/tags/vscode/"},{"name":"hexo","slug":"hexo","permalink":"http://ultimatefridge.top/tags/hexo/"}]},{"title":"vue 中使用 jQuery","date":"2019-04-08T07:14:34.000Z","path":"20190408/using-jquery-in-vue.html","text":"vue.js 1. npm 安装 jQuery 2. 低版本 jQuery 1. npm 安装 jQuery参考文章 2. 低版本 jQuery为了兼容原有项目，需要使用低版本 1.8.3 的 jQuery。 参考文章","tags":[{"name":"vue","slug":"vue","permalink":"http://ultimatefridge.top/tags/vue/"}]},{"title":"vscode 个人常用快捷键","date":"2019-04-03T02:36:10.000Z","path":"20190403/vscode-commonly-shortcuts.html","text":"整理一下日常使用 vscode 最常用的快捷键，备忘，也供大家参考 1. 默认（ Source：默认） 2. 自定（ Source：用户） 以下表格，’名称‘一项，用的是 vscode 中文版的一致名称，方便在 vscode 里查找。 1. 默认（ Source：默认） 名称 按键 说明 更改语言模式 ⌘+k,m 改变文件的语言，对于新建一个空白无后缀的文件的时候，特别有用 终端：新建集成终端 ⌃+⇧+` 无 向上复制行（向下复制行） ⇧+⌥+↑ ( ⇧+⌥+↓ ) 复制光标所在的行 删除行 ⇧+⌘+k 删除光标所在的行 2. 自定（ Source：用户） 名称 按键 说明 是否与系统默认的冲突 终端：聚焦到终端 ⌘+k,j 把当前焦点切换到终端窗口中，在编辑文件的时候，切换回终端运行命令，非常有用；如果当前没有终端窗口，会新建一个 否 终端：聚焦于上一终端（下一终端） ⌃+⌘,↑（ ⌃+⌘,↓ ） 如果当前焦点不在终端，该命令与上一个聚焦到终端的作用一样，聚焦（无则新建）；如果当前焦点在终端，并且打开了多个终端，则会在多个终端间上下切换 否","tags":[{"name":"vscode","slug":"vscode","permalink":"http://ultimatefridge.top/tags/vscode/"}]},{"title":"字符串相关知识总结","date":"2017-07-30T09:19:52.000Z","path":"20170730/knowledge-about-string.html","text":"说到字符串，就离不开 unicode，utf-8，utf-16等各种定义。同时日常写代码过程中，也会对字符串使用正则匹配，查找等。字符串相关知识点整理汇总，不断更新汇总。 strings 1. unicode 1.1. unicode 的定义 1.2. unicode 字符集 2. utf8 2.1. utf8 是一个编码规则 2.2. 编码规则 2.3. 中文在utf8中用3个字节表示 2.4. PHP 中的 utf8 2.5. 与ascii编码的关系 3. php中的字符串 4. 参考文章 1. unicode1.1. unicode 的定义 字符集：为每一个「字符」分配一个唯一的 ID（学名为码位 / 码点 / Code Point） 狭义的unicode是一种字符集，目的是将世界上任何文字和标志全部编码。 广义的unicode是一个标准，定义了一个字符集，和一系列的编码规则。即 unicode 字符集和 utf8，utf16 等编码规则。 1.2. unicode 字符集每个字符的位置称为码点（Code Point），U+(hex)表示。例如‘知’的码位是30693，记作 U+77E5（30693 的十六进制为 0x77E5）。 Unicode目前总共有17个平面，0x000000 - 0x10FFFF。 每个平面有65536个码点，占用2字节，用16进制表示就是 0x0000 - 0xFFFF。一般常说的unicode，指的是基本平面，即码点为 U+0000 - u+FFFF的字符。 2. utf82.1. utf8 是一个编码规则utf8用1到4个字节表示一个字符，它是根据一个字符的unicode码点来决定如何编码，因此utf8是一个编码规则。 2.2. 编码规则 UTF-8的编码规则很简单，只有二条： 1 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。 2 对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。 Unicode符号范围 (十六进制) UTF-8编码方式（二进制） 0000 0000-0000 007F 0xxxxxxx 0000 0080-0000 07FF 110xxxxx 10xxxxxx 0000 0800-0000 FFFF 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx unicode中与中文有关的平面链接 看完所有的 Unicode 区块就不会有这个问题了～～西方大多数是拼音文字，所以我们的文字被他们叫做“表意文字”～～CJK 统一表意扩展 A：U+3400 - U+4DBFCJK 统一表意字符：U+4E00 - U+9FFFCJK 兼容表意字符：U+F900 - U+FAFFCJK 统一表意扩展 B：U+20000 - U+2A6DFCJK 兼容表意字符：U+2F800 - U+2FA1F其中扩展 B 区里面的字你一辈子都不会见到几个，“CJK 兼容表意字符”里面的字通常在“CJK 统一表意字符”都有对应。 2.3. 中文在utf8中用3个字节表示根据utf-8的编码规则，可以知道unicode第一平面（0平面）上的符号对应utf-8为1到3个字节表示，cjk 统一表意扩展 A 的第一个字符是 x3400（是汉字‘一’），对应utf-8为3个字节表示。 因此可以说，我们能见到的极大极大部分汉字，在utf-8中都用3个字节表示。 知的码点是 U+77E5，按照 UTF-8 编码为字节序列 0xE79FA5。 2.4. PHP 中的 utf8在php中，字符串编码方式与文件保存的编码方式一致，文件一般以utf8保存，所以 php 中字符串一般可以认为是 utf8 编码。 用 strlen 函数，返回的是字符串的字节数。 12345echo strlen('一'); // result is 3//‘知’的码点是 U+77E5，按照 UTF-8 编码为字节序列 0xE79FA5。 $string = '知';echo unpack('H*',$string)[1]; // result is e79fa5 2.5. 与ascii编码的关系ascii 是用单字节表示字符的规则，在标准的 ascii 码表中，0x01-0x7f，共127个字符。0x80 - 0xFF 是扩展的 ascii 码表，用来表示一个控制字符等。因此 utf8 编码规则是兼容 ascii 编码规则的。 3. php中的字符串在php中，字符以utf8编码。 简单匹配中文的一个正则表达式,因为一个英文字符的编码为01-7f,所以只要判断某个字节的大小为大于7f，则可以知道当前字符并不是单字节字符，而是一个 utf8 的多字节字符串。 1preg_match_all('/[\\0x7f-0xff]+/',$subjectString,$matches); pack 与 unpack 函数 将字符串压缩和解压的函数。 4. 参考文章 参考1 参考2 参考3 参考4","tags":[{"name":"字符串","slug":"字符串","permalink":"http://ultimatefridge.top/tags/字符串/"}]},{"title":"Git基础","date":"2016-02-26T14:16:26.000Z","path":"20160226/Git基础.html","text":"git file lifecycle 1. 基本全局设置，设置名字和邮件地址 2. 查看本项目的基本设置 3. 创建本机的 ssh key 4. 与远程仓库关联 4.1. 从远程仓库克隆 4.2. 推送至远程仓库 5. 查看文件差异的命令 5.1. 查看当前工作目录和暂存区之间的文件差异 5.2. 查看暂存区与上次commit版本文件的差异 6. 提交更新 6.1. 启动文本编辑器以便输入本次提交 6.2. 直接提交的方式，m后面跟的是说明。 6.3. 跳过使用暂存区 7. 移除文件 7.1. 将文件或文件夹从工作目录中删除 7.2. 把文件从Git仓库中删除 8. 推送/跟踪分支 8.1. 创建远程分支 8.2. 从远程分支创建本地分支 8.3. 设置本地分支跟踪分支 8.3.1. 从一个远程跟踪分支检出一个本地分支 8.3.2. 建立一个本地分支并且跟踪远程分支 8.4. 设置一个本地分支跟踪某一支远程分支 1. 基本全局设置，设置名字和邮件地址12git config --global user.name \"yourname\"git config --global user.email \"yourmail\" 2. 查看本项目的基本设置1git config --list 3. 创建本机的 ssh key1ssh-keygen -t rsa -C \"youremail@example.com\" 然后用户主目录里找到.ssh目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。进入 github 的设置里，将公钥添加到里面的ssh key里面去即可。这样才可以使用 ssh 协议传输 git 数据。 4. 与远程仓库关联4.1. 从远程仓库克隆只要是开源的 github 项目，从远程仓库克隆是允许的。使用git clone命令克隆远程库，后面跟远程仓库的地址，然后是文件夹没名字。 1git clone github/address path/to/folder 上述从远程仓库拉取项目，并且默认已经将本地与远程库（名字为origin）关联起来。以后使用以下 git push 命令推送本地的 master 分支到远程 origin 库。 1git push origin master 4.2. 推送至远程仓库对于一个空的远程仓库，可以使用以下命令将本地仓库与远程仓库关联，并且推送内容至远端，进行远程仓库的初始化。 12git remote add origin XXXXXXXXXgit push -u origin master 这样本地仓库的master主分支已经和远程仓库(origin)关联起来。 5. 查看文件差异的命令5.1. 查看当前工作目录和暂存区之间的文件差异1git diff 命令比较的是当前工作目录和暂存区之间的差异，也就是比较刚刚修改的内容与已经暂存起来的内容的差异，因此如果你刚刚使用git add -A 提交了所有跟踪的文件的修改到暂存区，git diff 命令将看不到内容输出，因为此时的工作目录是clean的。 5.2. 查看暂存区与上次commit版本文件的差异1git diff --staged 6. 提交更新6.1. 启动文本编辑器以便输入本次提交1git add 这种方式会启动文本编辑器以便输入本次提交的说明。 6.2. 直接提交的方式，m后面跟的是说明。1git add -m 提交说明 6.3. 跳过使用暂存区1git add -am Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。 7. 移除文件7.1. 将文件或文件夹从工作目录中删除这时候可以使用命令。此命令会将目标文件从跟踪清单中删除，并且从工作目录中删除。也可以从工作目录中删掉，然后用git add命令来执行更新。 7.2. 把文件从Git仓库中删除另外一种情况是，我们想把文件从Git仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。为达到这一目的，使用 –cached 选项。 1git rm --cached 目标文件或文件夹 8. 推送/跟踪分支 远程引用是对远程仓库的引用（指针），包括分支、标签等等。 你可以通过 git ls-remote (remote) 来显式地获得远程引用的完整列表，或者通过 git remote show (remote) 获得远程分支的更多信息。 然而，一个更常见的做法是利用远程跟踪分支。 远程跟踪分支是远程分支状态的引用。它们是你不能移动的本地引用，当你做任何网络通信操作时，它们会自动移动。远程跟踪分支像是你上次连接到远程仓库时，那些分支所处状态的书签。它们以 (remote)/(branch) 形式命名。 例如，如果你想要看你最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支；但是在服务器上的分支会指向 origin/iss53 的提交。 当我们以克隆远程仓库或者推送本地文件夹初始化远程仓库的形式建立起本地与远程仓库的关联时，即将本地的master分支与远程仓库(origin)的master分支关联起来。 当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。本地的分支并不会自动与远程仓库同你必须显式地推送想要分享的分支。这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。 8.1. 创建远程分支如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push (remote) (branch): 1git push origin serverfix 下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用. 8.2. 从远程分支创建本地分支可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上： 123$ git checkout -b serverfix origin/serverfixBranch serverfix set up to track remote branch serverfix from origin.Switched to a new branch 'serverfix' 这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。 8.3. 设置本地分支跟踪分支8.3.1. 从一个远程跟踪分支检出一个本地分支从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。 8.3.2. 建立一个本地分支并且跟踪远程分支当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支。 最简单的就是之前看到的例子，运行 git checkout -b [branch] [remotename]/[branch]。 这是一个十分常用的操作所以 Git 提供了 –track 快捷方式： 123$ git checkout --track origin/serverfixBranch serverfix set up to track remote branch serverfix from origin.Switched to a new branch 'serverfix' 如果想要将本地分支与远程分支设置为不同名字，你可以轻松地增加一个不同名字的本地分支的上一个命令： 123$ git checkout -b sf origin/serverfixBranch sf set up to track remote branch serverfix from origin.Switched to a new branch 'sf' 现在，本地分支 sf 会自动从 origin/serverfix 拉取。 8.4. 设置一个本地分支跟踪某一支远程分支设置一个本地分支跟踪某一支远程分支设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 –set-upstream-to 选项运行 git branch 来显式地设置。 12$ git branch -u origin/serverfixBranch serverfix set up to track remote branch serverfix from origin.","tags":[{"name":"git","slug":"git","permalink":"http://ultimatefridge.top/tags/git/"}]}]