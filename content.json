[{"title":"修改 hexo 的 markdown 标题链接形式","date":"2019-04-11T01:47:34.000Z","path":"20190411/modify-title-link-in-hexo.html","text":"修改 hexo 的 markdown 标题链接形式以便和 vscode 更好的配合写作. 1. 配置 hexo 2. 修改依赖包的源码 目前主力编辑器是 vscode，大部分的 markdown 文章都是在 vscode 里面写，然后复制到印象笔记或者hexo里去。 vscode 里使用 Markdown TOC 插件来为 markdown 文档生成 toc。但是生成的链接形式与 hexo 渲染生成的链接形式不一样，导致在 hexo 里文章内容的 toc 不能正常导航。 例子： 1234567对于以下标题# 2.4. HelloWorldMarkdown TOC 生成的链接形式为：#24-hellowold在 hexo 里渲染生成的链接形式为：#2-4-HelloWorld Markdown TOC 会把标题里的英文字母全部小写，并且每级标题用 - 隔开。 更改以下两处地方即可让 hexo 的链接形式与 Markdown TOC 的一致。 1. 配置 hexo123# https://github.com/hexojs/hexo-renderer-marked/blob/master/README.mdmarked: modifyAnchors: 1 # 默认为’‘,默认行为，不改变标题中的字母的大小写；设置为 1，则将内容中的 h1，h2 等标题中的字母转换为小写。设置为 1 是为了兼容 vscode 中的 toc 插件生成的链接（该插件会将字母全部变为小写） 2. 修改依赖包的源码在 node_modules/hexo-util/lib/slugize.js 中增加一个正则替换语句 12345678910111213141516171819202122232425// 原代码var result = escapeDiacritic(str) // Remove control characters .replace(rControl, '') // Replace special characters .replace(rSpecial, separator) // Remove continous separators .replace(new RegExp(escapedSep + '&#123;2,&#125;', 'g'), separator) // Remove prefixing and trailing separtors .replace(new RegExp('^' + escapedSep + '+|' + escapedSep + '+$', 'g'), '');// 修改为var result = escapeDiacritic(str) // Remove control characters .replace(rControl, '') // Adapt to Markdown TOC .replace(/(\\d+)(\\.)(?!\\s)/g, function (fullMatch, group1, group2) &#123; return group1; &#125;) // Replace special characters .replace(rSpecial, separator) // Remove continous separators .replace(new RegExp(escapedSep + '&#123;2,&#125;', 'g'), separator) // Remove prefixing and trailing separtors .replace(new RegExp('^' + escapedSep + '+|' + escapedSep + '+$', 'g'), '');","tags":[{"name":"vscode","slug":"vscode","permalink":"http://ultimatefridge.top/tags/vscode/"},{"name":"hexo","slug":"hexo","permalink":"http://ultimatefridge.top/tags/hexo/"}]},{"title":"vue 中使用 jQuery","date":"2019-04-08T07:14:34.000Z","path":"20190408/using-jquery-in-vue.html","text":"vue 1. npm 安装 jQuery 2. 低版本 jQuery 1. npm 安装 jQuery参考文章 2. 低版本 jQuery为了兼容原有项目，需要使用低版本 1.8.3 的 jQuery。 参考文章","tags":[{"name":"vue","slug":"vue","permalink":"http://ultimatefridge.top/tags/vue/"}]},{"title":"vscode 个人常用快捷键","date":"2019-04-03T02:36:10.000Z","path":"20190403/vscode-commonly-shortcuts.html","text":"整理一下日常使用 vscode 最常用的快捷键，备忘，也供大家参考 1. 默认（ Source：默认） 2. 自定（ Source：用户） 以下表格，’名称‘一项，用的是 vscode 中文版的一致名称，方便在 vscode 里查找。 1. 默认（ Source：默认） 名称 按键 说明 更改语言模式 ⌘+k,m 改变文件的语言，对于新建一个空白无后缀的文件的时候，特别有用 终端：新建集成终端 ⌃+⇧+` 无 向上复制行（向下复制行） ⇧+⌥+↑ ( ⇧+⌥+↓ ) 复制光标所在的行 删除行 ⇧+⌘+k 删除光标所在的行 2. 自定（ Source：用户） 名称 按键 说明 是否与系统默认的冲突 终端：聚焦到终端 ⌘+k,j 把当前焦点切换到终端窗口中，在编辑文件的时候，切换回终端运行命令，非常有用；如果当前没有终端窗口，会新建一个 否 终端：聚焦于上一终端（下一终端） ⌃+⌘,↑（ ⌃+⌘,↓ ） 如果当前焦点不在终端，该命令与上一个聚焦到终端的作用一样，聚焦（无则新建）；如果当前焦点在终端，并且打开了多个终端，则会在多个终端间上下切换 否","tags":[{"name":"vscode","slug":"vscode","permalink":"http://ultimatefridge.top/tags/vscode/"}]},{"title":"字符串相关知识总结","date":"2017-07-30T09:19:52.000Z","path":"20170730/knowledge-about-string.html","text":"说到字符串，就离不开 unicode，utf-8，utf-16等各种定义。同时日常写代码过程中，也会对字符串使用正则匹配，查找等。字符串相关知识点整理汇总，不断更新汇总。 strings 1. unicode 1.1. unicode 的定义 1.2. unicode 字符集 2. utf8 2.1. utf8 是一个编码规则 2.2. 编码规则 2.3. 中文在utf8中用3个字节表示 2.4. PHP 中的 utf8 2.5. 与ascii编码的关系 3. php中的字符串 4. 参考文章 1. unicode1.1. unicode 的定义 字符集：为每一个「字符」分配一个唯一的 ID（学名为码位 / 码点 / Code Point） 狭义的unicode是一种字符集，目的是将世界上任何文字和标志全部编码。 广义的unicode是一个标准，定义了一个字符集，和一系列的编码规则。即 unicode 字符集和 utf8，utf16 等编码规则。 1.2. unicode 字符集每个字符的位置称为码点（Code Point），U+(hex)表示。例如‘知’的码位是30693，记作 U+77E5（30693 的十六进制为 0x77E5）。 Unicode目前总共有17个平面，0x000000 - 0x10FFFF。 每个平面有65536个码点，占用2字节，用16进制表示就是 0x0000 - 0xFFFF。一般常说的unicode，指的是基本平面，即码点为 U+0000 - u+FFFF的字符。 2. utf82.1. utf8 是一个编码规则utf8用1到4个字节表示一个字符，它是根据一个字符的unicode码点来决定如何编码，因此utf8是一个编码规则。 2.2. 编码规则 UTF-8的编码规则很简单，只有二条： 1 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。 2 对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。 Unicode符号范围 (十六进制) UTF-8编码方式（二进制） 0000 0000-0000 007F 0xxxxxxx 0000 0080-0000 07FF 110xxxxx 10xxxxxx 0000 0800-0000 FFFF 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx unicode中与中文有关的平面链接 看完所有的 Unicode 区块就不会有这个问题了～～西方大多数是拼音文字，所以我们的文字被他们叫做“表意文字”～～CJK 统一表意扩展 A：U+3400 - U+4DBFCJK 统一表意字符：U+4E00 - U+9FFFCJK 兼容表意字符：U+F900 - U+FAFFCJK 统一表意扩展 B：U+20000 - U+2A6DFCJK 兼容表意字符：U+2F800 - U+2FA1F其中扩展 B 区里面的字你一辈子都不会见到几个，“CJK 兼容表意字符”里面的字通常在“CJK 统一表意字符”都有对应。 2.3. 中文在utf8中用3个字节表示根据utf-8的编码规则，可以知道unicode第一平面（0平面）上的符号对应utf-8为1到3个字节表示，cjk 统一表意扩展 A 的第一个字符是 x3400（是汉字‘一’），对应utf-8为3个字节表示。 因此可以说，我们能见到的极大极大部分汉字，在utf-8中都用3个字节表示。 知的码点是 U+77E5，按照 UTF-8 编码为字节序列 0xE79FA5。 2.4. PHP 中的 utf8在php中，字符串编码方式与文件保存的编码方式一致，文件一般以utf8保存，所以 php 中字符串一般可以认为是 utf8 编码。 用 strlen 函数，返回的是字符串的字节数。 12345echo strlen('一'); // result is 3//‘知’的码点是 U+77E5，按照 UTF-8 编码为字节序列 0xE79FA5。 $string = '知';echo unpack('H*',$string)[1]; // result is e79fa5 2.5. 与ascii编码的关系ascii 是用单字节表示字符的规则，在标准的 ascii 码表中，0x01-0x7f，共127个字符。0x80 - 0xFF 是扩展的 ascii 码表，用来表示一个控制字符等。因此 utf8 编码规则是兼容 ascii 编码规则的。 3. php中的字符串在php中，字符以utf8编码。 简单匹配中文的一个正则表达式,因为一个英文字符的编码为01-7f,所以只要判断某个字节的大小为大于7f，则可以知道当前字符并不是单字节字符，而是一个 utf8 的多字节字符串。 1preg_match_all('/[\\0x7f-0xff]+/',$subjectString,$matches); pack 与 unpack 函数 将字符串压缩和解压的函数。 4. 参考文章 参考1 参考2 参考3 参考4","tags":[{"name":"字符串","slug":"字符串","permalink":"http://ultimatefridge.top/tags/字符串/"}]}]