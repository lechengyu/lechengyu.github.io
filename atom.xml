<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>终极冰箱</title>
  <icon>https://www.gravatar.com/avatar/fb57ee9372b4c0b1b5493e12e0eba353</icon>
  <subtitle>Freeze！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ultimatefridge.top/"/>
  <updated>2019-04-11T14:15:04.184Z</updated>
  <id>http://ultimatefridge.top/</id>
  
  <author>
    <name>yulecheng</name>
    <email>yulecheng@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>修改 hexo 的 markdown 标题链接形式</title>
    <link href="http://ultimatefridge.top/20190411/modify-title-link-in-hexo.html"/>
    <id>http://ultimatefridge.top/20190411/modify-title-link-in-hexo.html</id>
    <published>2019-04-11T01:47:34.000Z</published>
    <updated>2019-04-11T14:15:04.184Z</updated>
    
    <content type="html"><![CDATA[<p>修改 hexo 的 markdown 标题链接形式以便和 vscode 更好的配合写作.</p><a id="more"></a><!-- TOC --><ul><li><a href="#1-配置-hexo">1. 配置 hexo</a></li><li><a href="#2-修改依赖包的源码">2. 修改依赖包的源码</a></li></ul><!-- /TOC --><p>目前主力编辑器是 vscode，大部分的 markdown 文章都是在 vscode 里面写，然后复制到印象笔记或者hexo里去。</p><p>vscode 里使用 Markdown TOC 插件来为 markdown 文档生成 toc。但是生成的链接形式与 hexo 渲染生成的链接形式不一样，导致在 hexo 里文章内容的 toc 不能正常导航。</p><p>例子：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对于以下标题</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.4. HelloWorld</span></span><br><span class="line"></span><br><span class="line">Markdown TOC 生成的链接形式为：#24-hellowold</span><br><span class="line"></span><br><span class="line">在 hexo 里渲染生成的链接形式为：#2-4-HelloWorld</span><br></pre></td></tr></table></figure><p>Markdown TOC 会把标题里的英文字母全部小写，并且每级标题用 <code>-</code> 隔开。</p><p>更改以下两处地方即可让 hexo 的链接形式与 Markdown TOC 的一致。</p><h1 id="1-配置-hexo"><a href="#1-配置-hexo" class="headerlink" title="1. 配置 hexo"></a>1. 配置 hexo</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/hexojs/hexo-renderer-marked/blob/master/README.md</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line"><span class="attr">  modifyAnchors:</span> <span class="number">1</span> <span class="comment"># 默认为’‘,默认行为，不改变标题中的字母的大小写；设置为 1，则将内容中的 h1，h2 等标题中的字母转换为小写。设置为 1 是为了兼容 vscode 中的 toc 插件生成的链接（该插件会将字母全部变为小写）</span></span><br></pre></td></tr></table></figure><h1 id="2-修改依赖包的源码"><a href="#2-修改依赖包的源码" class="headerlink" title="2. 修改依赖包的源码"></a>2. 修改依赖包的源码</h1><p>在 <code>node_modules/hexo-util/lib/slugize.js</code> 中增加一个正则替换语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原代码</span></span><br><span class="line"><span class="keyword">var</span> result = escapeDiacritic(str)</span><br><span class="line">    <span class="comment">// Remove control characters</span></span><br><span class="line">    .replace(rControl, <span class="string">''</span>)</span><br><span class="line">    <span class="comment">// Replace special characters</span></span><br><span class="line">    .replace(rSpecial, separator)</span><br><span class="line">    <span class="comment">// Remove continous separators</span></span><br><span class="line">    .replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(escapedSep + <span class="string">'&#123;2,&#125;'</span>, <span class="string">'g'</span>), separator)</span><br><span class="line">    <span class="comment">// Remove prefixing and trailing separtors</span></span><br><span class="line">    .replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + escapedSep + <span class="string">'+|'</span> + escapedSep + <span class="string">'+$'</span>, <span class="string">'g'</span>), <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改为</span></span><br><span class="line"><span class="keyword">var</span> result = escapeDiacritic(str)</span><br><span class="line">    <span class="comment">// Remove control characters</span></span><br><span class="line">    .replace(rControl, <span class="string">''</span>)</span><br><span class="line">    <span class="comment">// Adapt to Markdown TOC</span></span><br><span class="line">    .replace(<span class="regexp">/(\d+)(\.)(?!\s)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">fullMatch, group1, group2</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> group1;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// Replace special characters</span></span><br><span class="line">    .replace(rSpecial, separator)</span><br><span class="line">    <span class="comment">// Remove continous separators</span></span><br><span class="line">    .replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(escapedSep + <span class="string">'&#123;2,&#125;'</span>, <span class="string">'g'</span>), separator)</span><br><span class="line">    <span class="comment">// Remove prefixing and trailing separtors</span></span><br><span class="line">    .replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + escapedSep + <span class="string">'+|'</span> + escapedSep + <span class="string">'+$'</span>, <span class="string">'g'</span>), <span class="string">''</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;修改 hexo 的 markdown 标题链接形式以便和 vscode 更好的配合写作.&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://ultimatefridge.top/categories/tools/"/>
    
    
      <category term="vscode" scheme="http://ultimatefridge.top/tags/vscode/"/>
    
      <category term="hexo" scheme="http://ultimatefridge.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>vue 中使用 jQuery</title>
    <link href="http://ultimatefridge.top/20190408/using-jquery-in-vue.html"/>
    <id>http://ultimatefridge.top/20190408/using-jquery-in-vue.html</id>
    <published>2019-04-08T07:14:34.000Z</published>
    <updated>2019-04-12T06:29:35.856Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.clientresourcesinc.com/wp-content/uploads/2018/06/vuejs_logo.png" alt="vue.js" title>                </div>                <div class="image-caption">vue.js</div>            </figure><a id="more"></a><!-- TOC --><ul><li><a href="#1-npm-安装-jquery">1. npm 安装 jQuery</a></li><li><a href="#2-低版本-jquery">2. 低版本 jQuery</a></li></ul><!-- /TOC --><h1 id="1-npm-安装-jquery"><a href="#1-npm-安装-jquery" class="headerlink" title="1. npm 安装 jQuery"></a>1. npm 安装 jQuery</h1><p><a href="https://maketips.net/tip/223/how-to-include-jquery-into-vuejs">参考文章</a></p><h1 id="2-低版本-jquery"><a href="#2-低版本-jquery" class="headerlink" title="2. 低版本 jQuery"></a>2. 低版本 jQuery</h1><p>为了兼容原有项目，需要使用低版本 1.8.3 的 jQuery。</p><p><a href="https://cloud.tencent.com/developer/article/1011243">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://www.clientresourcesinc.com/wp-content/uploads/2018/06/vuejs_logo.png&quot; alt=&quot;vue.js&quot; title&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;vue.js&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
      <category term="coding" scheme="http://ultimatefridge.top/categories/coding/"/>
    
    
      <category term="vue" scheme="http://ultimatefridge.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vscode 个人常用快捷键</title>
    <link href="http://ultimatefridge.top/20190403/vscode-commonly-shortcuts.html"/>
    <id>http://ultimatefridge.top/20190403/vscode-commonly-shortcuts.html</id>
    <published>2019-04-03T02:36:10.000Z</published>
    <updated>2019-04-12T03:09:44.169Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下日常使用 vscode 最常用的快捷键，备忘，也供大家参考</p><a id="more"></a><!-- TOC --><ul><li><a href="#1-默认-source默认">1. 默认（ Source：默认）</a></li><li><a href="#2-自定-source用户">2. 自定（ Source：用户）</a></li></ul><!-- /TOC --><p>以下表格，’名称‘一项，用的是 vscode 中文版的一致名称，方便在 vscode 里查找。</p><h1 id="1-默认（-source：默认）"><a href="#1-默认（-source：默认）" class="headerlink" title="1. 默认（ Source：默认）"></a>1. 默认（ Source：默认）</h1><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:center">按键</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">更改语言模式</td><td style="text-align:center">⌘+k,m</td><td style="text-align:left">改变文件的语言，对于新建一个空白无后缀的文件的时候，特别有用</td></tr><tr><td style="text-align:left">终端：新建集成终端</td><td style="text-align:center">⌃+⇧+`</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">向上复制行（向下复制行）</td><td style="text-align:center">⇧+⌥+↑ ( ⇧+⌥+↓ )</td><td style="text-align:left">复制光标所在的行</td></tr><tr><td style="text-align:left">删除行</td><td style="text-align:center">⇧+⌘+k</td><td style="text-align:left">删除光标所在的行</td></tr></tbody></table><h1 id="2-自定（-source：用户）"><a href="#2-自定（-source：用户）" class="headerlink" title="2. 自定（ Source：用户）"></a>2. 自定（ Source：用户）</h1><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">按键</th><th style="text-align:left">说明</th><th style="text-align:left">是否与系统默认的冲突</th></tr></thead><tbody><tr><td style="text-align:left">终端：聚焦到终端</td><td style="text-align:left">⌘+k,j</td><td style="text-align:left">把当前焦点切换到终端窗口中，在编辑文件的时候，切换回终端运行命令，非常有用；如果当前没有终端窗口，会新建一个</td><td style="text-align:left">否</td></tr><tr><td style="text-align:left">终端：聚焦于上一终端（下一终端）</td><td style="text-align:left">⌃+⌘,↑（ ⌃+⌘,↓ ）</td><td style="text-align:left">如果当前焦点不在终端，该命令与上一个聚焦到终端的作用一样，聚焦（无则新建）；如果当前焦点在终端，并且打开了多个终端，则会在多个终端间上下切换</td><td style="text-align:left">否</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下日常使用 vscode 最常用的快捷键，备忘，也供大家参考&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://ultimatefridge.top/categories/tools/"/>
    
    
      <category term="vscode" scheme="http://ultimatefridge.top/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>字符串相关知识总结</title>
    <link href="http://ultimatefridge.top/20170730/knowledge-about-string.html"/>
    <id>http://ultimatefridge.top/20170730/knowledge-about-string.html</id>
    <published>2017-07-30T09:19:52.000Z</published>
    <updated>2019-04-12T01:22:08.100Z</updated>
    
    <content type="html"><![CDATA[<p>说到字符串，就离不开 unicode，utf-8，utf-16等各种定义。同时日常写代码过程中，也会对字符串使用正则匹配，查找等。字符串相关知识点整理汇总，不断更新汇总。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://zelig880.com/wp-content/uploads/2017/07/c-strings.jpg" alt="strings" title>                </div>                <div class="image-caption">strings</div>            </figure><a id="more"></a><!-- TOC --><ul><li><a href="#1-unicode">1. unicode</a><ul><li><a href="#11-unicode-的定义">1.1. unicode 的定义</a></li><li><a href="#12-unicode-字符集">1.2. unicode 字符集</a></li></ul></li><li><a href="#2-utf8">2. utf8</a><ul><li><a href="#21-utf8-是一个编码规则">2.1. utf8 是一个编码规则</a></li><li><a href="#22-编码规则">2.2. 编码规则</a></li><li><a href="#23-中文在utf8中用3个字节表示">2.3. 中文在utf8中用3个字节表示</a></li><li><a href="#24-php-中的-utf8">2.4. PHP 中的 utf8</a></li><li><a href="#25-与ascii编码的关系">2.5. 与ascii编码的关系</a></li></ul></li><li><a href="#3-php中的字符串">3. php中的字符串</a></li><li><a href="#4-参考文章">4. 参考文章</a></li></ul><!-- /TOC --><h1 id="1-unicode"><a href="#1-unicode" class="headerlink" title="1. unicode"></a>1. unicode</h1><h2 id="11-unicode-的定义"><a href="#11-unicode-的定义" class="headerlink" title="1.1. unicode 的定义"></a>1.1. unicode 的定义</h2><blockquote><p>字符集：为每一个「字符」分配一个唯一的 ID（学名为码位 / 码点 / Code Point）</p></blockquote><p>狭义的unicode是一种字符集，目的是将世界上任何文字和标志全部编码。</p><p>广义的unicode是一个标准，定义了一个字符集，和一系列的编码规则。即 unicode 字符集和 utf8，utf16 等编码规则。</p><h2 id="12-unicode-字符集"><a href="#12-unicode-字符集" class="headerlink" title="1.2. unicode 字符集"></a>1.2. unicode 字符集</h2><p>每个字符的位置称为码点（Code Point），U+(hex)表示。例如‘知’的码位是30693，记作 U+77E5（30693 的十六进制为 0x77E5）。</p><p>Unicode目前总共有17个平面，0x000000 - 0x10FFFF。</p><p>每个平面有65536个码点，占用2字节，用16进制表示就是 0x0000 - 0xFFFF。一般常说的unicode，指的是基本平面，即码点为 U+0000 - u+FFFF的字符。</p><h1 id="2-utf8"><a href="#2-utf8" class="headerlink" title="2. utf8"></a>2. utf8</h1><h2 id="21-utf8-是一个编码规则"><a href="#21-utf8-是一个编码规则" class="headerlink" title="2.1. utf8 是一个编码规则"></a>2.1. utf8 是一个编码规则</h2><p>utf8用1到4个字节表示一个字符，它是根据一个字符的unicode码点来决定如何编码，因此utf8是一个编码规则。</p><h2 id="22-编码规则"><a href="#22-编码规则" class="headerlink" title="2.2. 编码规则"></a>2.2. 编码规则</h2><ul><li>UTF-8的编码规则很简单，只有二条：<ul><li>1 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</li><li>2 对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</li></ul></li></ul><table><thead><tr><th style="text-align:left">Unicode符号范围 (十六进制)</th><th style="text-align:left">UTF-8编码方式（二进制）</th></tr></thead><tbody><tr><td style="text-align:left">0000 0000-0000 007F</td><td style="text-align:left">0xxxxxxx</td></tr><tr><td style="text-align:left">0000 0080-0000 07FF</td><td style="text-align:left">110xxxxx 10xxxxxx</td></tr><tr><td style="text-align:left">0000 0800-0000 FFFF</td><td style="text-align:left">1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td style="text-align:left">0001 0000-0010 FFFF</td><td style="text-align:left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><ul><li><p>unicode中与中文有关的平面<a href="http://bbs.csdn.net/topics/320152831">链接</a></p><blockquote><p>看完所有的 Unicode 区块就不会有这个问题了～～<br>西方大多数是拼音文字，所以我们的文字被他们叫做“表意文字”～～<br>CJK 统一表意扩展 A：U+3400 - U+4DBF<br>CJK 统一表意字符：U+4E00 - U+9FFF<br>CJK 兼容表意字符：U+F900 - U+FAFF<br>CJK 统一表意扩展 B：U+20000 - U+2A6DF<br>CJK 兼容表意字符：U+2F800 - U+2FA1F<br>其中扩展 B 区里面的字你一辈子都不会见到几个，“CJK 兼容表意字符”里面的字通常在“CJK 统一表意字符”都有对应。</p></blockquote></li></ul><h2 id="23-中文在utf8中用3个字节表示"><a href="#23-中文在utf8中用3个字节表示" class="headerlink" title="2.3. 中文在utf8中用3个字节表示"></a>2.3. 中文在utf8中用3个字节表示</h2><p>根据utf-8的编码规则，可以知道unicode第一平面（0平面）上的符号对应utf-8为1到3个字节表示，cjk 统一表意扩展 A 的第一个字符是 x3400（是汉字‘一’），对应utf-8为3个字节表示。</p><p>因此可以说，我们能见到的极大极大部分汉字，在utf-8中都用3个字节表示。</p><p><code>知</code>的码点是 U+77E5，按照 UTF-8 编码为字节序列 0xE79FA5。</p><h2 id="24-php-中的-utf8"><a href="#24-php-中的-utf8" class="headerlink" title="2.4. PHP 中的 utf8"></a>2.4. PHP 中的 utf8</h2><p>在php中，字符串编码方式与文件保存的编码方式一致，文件一般以utf8保存，所以 php 中字符串一般可以认为是 utf8 编码。</p><p>用 strlen 函数，返回的是字符串的字节数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> strlen(<span class="string">'一'</span>); <span class="comment">// result is 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//‘知’的码点是 U+77E5，按照 UTF-8 编码为字节序列 0xE79FA5。  </span></span><br><span class="line">$string = <span class="string">'知'</span>;</span><br><span class="line"><span class="keyword">echo</span> unpack(<span class="string">'H*'</span>,$string)[<span class="number">1</span>]; <span class="comment">// result is e79fa5</span></span><br></pre></td></tr></table></figure><h2 id="25-与ascii编码的关系"><a href="#25-与ascii编码的关系" class="headerlink" title="2.5. 与ascii编码的关系"></a>2.5. 与ascii编码的关系</h2><p>ascii 是用单字节表示字符的规则，在标准的 ascii 码表中，0x01-0x7f，共127个字符。0x80 - 0xFF 是扩展的 ascii 码表，用来表示一个控制字符等。因此 utf8 编码规则是兼容 ascii 编码规则的。</p><h1 id="3-php中的字符串"><a href="#3-php中的字符串" class="headerlink" title="3. php中的字符串"></a>3. php中的字符串</h1><p>在php中，字符以utf8编码。</p><ul><li>简单匹配中文的一个正则表达式,因为一个英文字符的编码为01-7f,所以只要判断某个字节的大小为大于7f，则可以知道当前字符并不是单字节字符，而是一个 utf8 的多字节字符串。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match_all(<span class="string">'/[\0x7f-0xff]+/'</span>,$subjectString,$matches);</span><br></pre></td></tr></table></figure><ul><li>pack 与 unpack 函数</li></ul><p>将字符串压缩和解压的函数。</p><h1 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h1><ul><li><a href="https://segmentfault.com/q/1010000000695368/a-1020000000695701">参考1</a></li><li><a href="http://bbs.csdn.net/topics/320152831">参考2</a></li><li><a href="https://en.wikipedia.org/wiki/Unicode">参考3</a></li><li><a href="https://www.zhihu.com/question/22881537">参考4</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到字符串，就离不开 unicode，utf-8，utf-16等各种定义。同时日常写代码过程中，也会对字符串使用正则匹配，查找等。字符串相关知识点整理汇总，不断更新汇总。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://zelig880.com/wp-content/uploads/2017/07/c-strings.jpg&quot; alt=&quot;strings&quot; title&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;strings&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
      <category term="coding" scheme="http://ultimatefridge.top/categories/coding/"/>
    
    
      <category term="字符串" scheme="http://ultimatefridge.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Git基础</title>
    <link href="http://ultimatefridge.top/20160226/Git%E5%9F%BA%E7%A1%80.html"/>
    <id>http://ultimatefridge.top/20160226/Git基础.html</id>
    <published>2016-02-26T14:16:26.000Z</published>
    <updated>2019-04-13T01:25:15.655Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://static.zybuluo.com/yulecheng/l9ruszjzldd1rmmc15co03q4/lifecycle.png" alt="git file lifecycle" title>                </div>                <div class="image-caption">git file lifecycle</div>            </figure><a id="more"></a><!-- TOC --><ul><li><a href="#1-基本全局设置设置名字和邮件地址">1. 基本全局设置，设置名字和邮件地址</a></li><li><a href="#2-查看本项目的基本设置">2. 查看本项目的基本设置</a></li><li><a href="#3-创建本机的-ssh-key">3. 创建本机的 ssh key</a></li><li><a href="#4-与远程仓库关联">4. 与远程仓库关联</a><ul><li><a href="#41-从远程仓库克隆">4.1. 从远程仓库克隆</a></li><li><a href="#42-推送至远程仓库">4.2. 推送至远程仓库</a></li></ul></li><li><a href="#5-查看文件差异的命令">5. 查看文件差异的命令</a><ul><li><a href="#51-查看当前工作目录和暂存区之间的文件差异">5.1. 查看当前工作目录和暂存区之间的文件差异</a></li><li><a href="#52-查看暂存区与上次commit版本文件的差异">5.2. 查看暂存区与上次commit版本文件的差异</a></li></ul></li><li><a href="#6-提交更新">6. 提交更新</a><ul><li><a href="#61-启动文本编辑器以便输入本次提交">6.1. 启动文本编辑器以便输入本次提交</a></li><li><a href="#62-直接提交的方式m后面跟的是说明">6.2. 直接提交的方式，m后面跟的是说明。</a></li><li><a href="#63-跳过使用暂存区">6.3. 跳过使用暂存区</a></li></ul></li><li><a href="#7-移除文件">7. 移除文件</a><ul><li><a href="#71-将文件或文件夹从工作目录中删除">7.1. 将文件或文件夹从工作目录中删除</a></li><li><a href="#72-把文件从git仓库中删除">7.2. 把文件从Git仓库中删除</a></li></ul></li><li><a href="#8-推送跟踪分支">8. 推送/跟踪分支</a><ul><li><a href="#81-创建远程分支">8.1. 创建远程分支</a></li><li><a href="#82-从远程分支创建本地分支">8.2. 从远程分支创建本地分支</a></li><li><a href="#83-设置本地分支跟踪分支">8.3. 设置本地分支跟踪分支</a><ul><li><a href="#831-从一个远程跟踪分支检出一个本地分支">8.3.1. 从一个远程跟踪分支检出一个本地分支</a></li><li><a href="#832-建立一个本地分支并且跟踪远程分支">8.3.2. 建立一个本地分支并且跟踪远程分支</a></li></ul></li><li><a href="#84-设置一个本地分支跟踪某一支远程分支">8.4. 设置一个本地分支跟踪某一支远程分支</a></li></ul></li></ul><!-- /TOC --><h1 id="1-基本全局设置，设置名字和邮件地址"><a href="#1-基本全局设置，设置名字和邮件地址" class="headerlink" title="1. 基本全局设置，设置名字和邮件地址"></a>1. 基本全局设置，设置名字和邮件地址</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"yourmail"</span></span><br></pre></td></tr></table></figure><h1 id="2-查看本项目的基本设置"><a href="#2-查看本项目的基本设置" class="headerlink" title="2. 查看本项目的基本设置"></a>2. 查看本项目的基本设置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h1 id="3-创建本机的-ssh-key"><a href="#3-创建本机的-ssh-key" class="headerlink" title="3. 创建本机的 ssh key"></a>3. 创建本机的 ssh key</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure><p>然后用户主目录里找到.ssh目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。进入 github 的设置里，将公钥添加到里面的ssh key里面去即可。这样才可以使用 ssh 协议传输 git 数据。</p><h1 id="4-与远程仓库关联"><a href="#4-与远程仓库关联" class="headerlink" title="4. 与远程仓库关联"></a>4. 与远程仓库关联</h1><h2 id="41-从远程仓库克隆"><a href="#41-从远程仓库克隆" class="headerlink" title="4.1. 从远程仓库克隆"></a>4.1. 从远程仓库克隆</h2><p>只要是开源的 github 项目，从远程仓库克隆是允许的。使用<code>git clone</code>命令克隆远程库，后面跟远程仓库的地址，然后是文件夹没名字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> github/address path/to/folder</span><br></pre></td></tr></table></figure><p>上述从远程仓库拉取项目，并且默认已经将本地与远程库（名字为<strong>origin</strong>）关联起来。<br>以后使用以下 git push  命令推送本地的 master 分支到远程 origin 库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="42-推送至远程仓库"><a href="#42-推送至远程仓库" class="headerlink" title="4.2. 推送至远程仓库"></a>4.2. 推送至远程仓库</h2><p>对于一个空的远程仓库，可以使用以下命令将本地仓库与远程仓库关联，并且推送内容至远端，进行远程仓库的初始化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin XXXXXXXXX</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>这样本地仓库的master主分支已经和远程仓库(origin)关联起来。</p><h1 id="5-查看文件差异的命令"><a href="#5-查看文件差异的命令" class="headerlink" title="5. 查看文件差异的命令"></a>5. 查看文件差异的命令</h1><h2 id="51-查看当前工作目录和暂存区之间的文件差异"><a href="#51-查看当前工作目录和暂存区之间的文件差异" class="headerlink" title="5.1. 查看当前工作目录和暂存区之间的文件差异"></a>5.1. 查看当前工作目录和暂存区之间的文件差异</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>命令比较的是当前工作目录和暂存区之间的差异，也就是比较刚刚修改的内容与已经暂存起来的内容的差异，因此如果你刚刚使用git add -A 提交了所有跟踪的文件的修改到暂存区，git diff 命令将看不到内容输出，因为此时的工作目录是clean的。</p><h2 id="52-查看暂存区与上次commit版本文件的差异"><a href="#52-查看暂存区与上次commit版本文件的差异" class="headerlink" title="5.2. 查看暂存区与上次commit版本文件的差异"></a>5.2. 查看暂存区与上次commit版本文件的差异</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --staged</span><br></pre></td></tr></table></figure><h1 id="6-提交更新"><a href="#6-提交更新" class="headerlink" title="6. 提交更新"></a>6. 提交更新</h1><h2 id="61-启动文本编辑器以便输入本次提交"><a href="#61-启动文本编辑器以便输入本次提交" class="headerlink" title="6.1. 启动文本编辑器以便输入本次提交"></a>6.1. 启动文本编辑器以便输入本次提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><p>这种方式会启动文本编辑器以便输入本次提交的说明。</p><h2 id="62-直接提交的方式，m后面跟的是说明。"><a href="#62-直接提交的方式，m后面跟的是说明。" class="headerlink" title="6.2. 直接提交的方式，m后面跟的是说明。"></a>6.2. 直接提交的方式，m后面跟的是说明。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -m 提交说明</span><br></pre></td></tr></table></figure><h2 id="63-跳过使用暂存区"><a href="#63-跳过使用暂存区" class="headerlink" title="6.3. 跳过使用暂存区"></a>6.3. 跳过使用暂存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -am</span><br></pre></td></tr></table></figure><p>Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。</p><h1 id="7-移除文件"><a href="#7-移除文件" class="headerlink" title="7. 移除文件"></a>7. 移除文件</h1><h2 id="71-将文件或文件夹从工作目录中删除"><a href="#71-将文件或文件夹从工作目录中删除" class="headerlink" title="7.1. 将文件或文件夹从工作目录中删除"></a>7.1. 将文件或文件夹从工作目录中删除</h2><p>这时候可以使用命令。此命令会将目标文件从跟踪清单中删除，并且从工作目录中删除。也可以从工作目录中删掉，然后用git add命令来执行更新。</p><h2 id="72-把文件从git仓库中删除"><a href="#72-把文件从git仓库中删除" class="headerlink" title="7.2. 把文件从Git仓库中删除"></a>7.2. 把文件从Git仓库中删除</h2><p>另外一种情况是，我们想把文件从Git仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。为达到这一目的，使用 –cached 选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached 目标文件或文件夹</span><br></pre></td></tr></table></figure><h1 id="8-推送-跟踪分支"><a href="#8-推送-跟踪分支" class="headerlink" title="8. 推送/跟踪分支"></a>8. 推送/跟踪分支</h1><blockquote><p>远程引用是对远程仓库的引用（指针），包括分支、标签等等。 你可以通过 git ls-remote (remote) 来显式地获得远程引用的完整列表，或者通过 git remote show (remote) 获得远程分支的更多信息。 然而，一个更常见的做法是利用远程跟踪分支。</p><p>远程跟踪分支是远程分支状态的引用。它们是你不能移动的本地引用，当你做任何网络通信操作时，它们会自动移动。远程跟踪分支像是你上次连接到远程仓库时，那些分支所处状态的书签。它们以 (remote)/(branch) 形式命名。</p><p>例如，如果你想要看你最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支；但是在服务器上的分支会指向 origin/iss53 的提交。</p></blockquote><p>当我们以克隆远程仓库或者推送本地文件夹初始化远程仓库的形式建立起本地与远程仓库的关联时，即将本地的master分支与远程仓库(origin)的master分支关联起来。</p><p>当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。本地的分支并不会自动与远程仓库同你必须显式地推送想要分享的分支。这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。</p><h2 id="81-创建远程分支"><a href="#81-创建远程分支" class="headerlink" title="8.1. 创建远程分支"></a>8.1. 创建远程分支</h2><p>如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push (remote) (branch):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin serverfix</span><br></pre></td></tr></table></figure><p>下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用.</p><h2 id="82-从远程分支创建本地分支"><a href="#82-从远程分支创建本地分支" class="headerlink" title="8.2. 从远程分支创建本地分支"></a>8.2. 从远程分支创建本地分支</h2><p>可以运行 <code>git merge origin/serverfix</code> 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b serverfix origin/serverfix</span><br><span class="line">Branch serverfix <span class="built_in">set</span> up to track remote branch serverfix from origin.</span><br><span class="line">Switched to a new branch <span class="string">'serverfix'</span></span><br></pre></td></tr></table></figure><p>这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。</p><h2 id="83-设置本地分支跟踪分支"><a href="#83-设置本地分支跟踪分支" class="headerlink" title="8.3. 设置本地分支跟踪分支"></a>8.3. 设置本地分支跟踪分支</h2><h3 id="831-从一个远程跟踪分支检出一个本地分支"><a href="#831-从一个远程跟踪分支检出一个本地分支" class="headerlink" title="8.3.1. 从一个远程跟踪分支检出一个本地分支"></a>8.3.1. 从一个远程跟踪分支检出一个本地分支</h3><p>从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。</p><h3 id="832-建立一个本地分支并且跟踪远程分支"><a href="#832-建立一个本地分支并且跟踪远程分支" class="headerlink" title="8.3.2. 建立一个本地分支并且跟踪远程分支"></a>8.3.2. 建立一个本地分支并且跟踪远程分支</h3><p>当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支。 最简单的就是之前看到的例子，运行 git checkout -b [branch] [remotename]/[branch]。 这是一个十分常用的操作所以 Git 提供了 –track 快捷方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --track origin/serverfix</span><br><span class="line">Branch serverfix <span class="built_in">set</span> up to track remote branch serverfix from origin.</span><br><span class="line">Switched to a new branch <span class="string">'serverfix'</span></span><br></pre></td></tr></table></figure><p>如果想要将本地分支与远程分支设置为不同名字，你可以轻松地增加一个不同名字的本地分支的上一个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b sf origin/serverfix</span><br><span class="line">Branch sf <span class="built_in">set</span> up to track remote branch serverfix from origin.</span><br><span class="line">Switched to a new branch <span class="string">'sf'</span></span><br></pre></td></tr></table></figure><p>现在，本地分支 sf 会自动从 origin/serverfix 拉取。</p><h2 id="84-设置一个本地分支跟踪某一支远程分支"><a href="#84-设置一个本地分支跟踪某一支远程分支" class="headerlink" title="8.4. 设置一个本地分支跟踪某一支远程分支"></a>8.4. 设置一个本地分支跟踪某一支远程分支</h2><p><strong>设置一个本地分支跟踪某一支远程分支</strong>设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 –set-upstream-to 选项运行 git branch 来显式地设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -u origin/serverfix</span><br><span class="line">Branch serverfix <span class="built_in">set</span> up to track remote branch serverfix from origin.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://static.zybuluo.com/yulecheng/l9ruszjzldd1rmmc15co03q4/lifecycle.png&quot; alt=&quot;git file lifecycle&quot; title&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;git file lifecycle&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
      <category term="coding" scheme="http://ultimatefridge.top/categories/coding/"/>
    
    
      <category term="git" scheme="http://ultimatefridge.top/tags/git/"/>
    
  </entry>
  
</feed>
